<?php

/**
 * @file
 * Allows admins to select which countries (based on IP address) can register for this site.
 */


/**
 * Implements hook_permission().
 */
function register_country_permission() {
  return array(
    'administer country restrictions' => array(
      'title'       => t('Administer country restrictions'),
      'description' => t('Configure register_country settings.'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function register_country_menu() {
  $items = array();

  $items['admin/config/people/register_country'] = array(
    'title' => 'Register country settings',
    'description' => 'Limit registration to specific countries based on IP address.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('register_country_settings_form'),
    'access arguments' => array('administer country restrictions'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Menu callback. Defines a form to control settings.
 */
function register_country_settings_form() {
  $config = config('register_country.settings');

  $form['#tree'] = TRUE;

  $form['user_denied_message'] = array(
    '#type' => 'textarea',
    '#rows' => 3,
    '#title' => t('Blocked visitor message'),
    '#description' => t("Message to display when a visitor is denied access by this module."),
    '#default_value' => $config->get('user_denied_message'),
  );

  $form['error_page'] = array(
    '#type' => 'textfield',
    '#title' => t('Registration denied page'),
    '#description' => t("This the address of the page to which the user will be redirected if they are not within one of the selected countries."),
    '#default_value' => $config->get('error_page'),
  );

  $form['no_match'] = array(
    '#type' => 'radios',
    '#title' => t('Handle unmatched addresses'),
    '#description' => t("If no country match is found for the visitor's IP address, should we allow or deny registration."),
    '#options' => array(
      'allow' => t('Allow'),
      'block' => t('Block'),
    ),
    '#default_value' => $config->get('no_match'),
  );

  // Countries Fieldset
  $form['countries'] = array(
    '#type' => 'fieldset',
    '#title' => t('Select countries'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    );

  $form['countries']['exclude_include'] = array(
    '#type' => 'radios',
    '#title' => t('Inclusion settings'),
    '#options' => array(
      'include' => t('Allow only selected countries'),
      'exclude' => t('Allow all countries except selected countries'),
    ),
    '#default_value' => $config->get('exclude_include'),
  );

  include_once BACKDROP_ROOT . '/core/includes/locale.inc';
  $standard_countries = country_get_list();
  $country_list = $config->get('country_list');
  $form['countries']['country_list'] = array(
    '#type' => 'checkboxes',
    '#options' => $standard_countries,
    '#title' => t('Country list'),
    '#default_value' => $config->get('country_list'),
  );

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );

  return $form;
}

/**
 * Submit handler for register_country_settings_form().
 */
function register_country_settings_form_submit($form, &$form_state) {
  $selected_countries = array_filter($form_state['values']['countries']['country_list']);

  $config = config('register_country.settings');
  $config->set('error_page', $form_state['values']['error_page']);
  $config->set('no_match', $form_state['values']['no_match']);
  $config->set('user_denied_message', $form_state['values']['user_denied_message']);
  $config->set('exclude_include', $form_state['values']['countries']['exclude_include']);
  $config->set('country_list', array_values($selected_countries));
  $config->save();

  include_once BACKDROP_ROOT . '/core/includes/locale.inc';
  $standard_countries = country_get_list();
  $selected_countries_names = array_intersect_key($standard_countries, $selected_countries);
  $selected_countries_list = implode(', ', $selected_countries_names);

  $message = t('Configuration has been updated.') . '<br />';
  if ($form_state['values']['countries']['exclude_include'] == 'include') {
    $message .= t('Visitors from the following countries will be allowed to register') . ':';
  }
  else {
    $message .= t('Visitors from the following countries will NOT be allowed to register') . ':';
  }
  $message .= theme('item_list', array('items' => $selected_countries_names));
  backdrop_set_message($message);
}

/**
 * Implementation of hook_user().
 *
 *  Checks the user's IP Address on registration.
 *  If they are not allowed to register then redirect to a designated page.
 */
function register_country_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $settings = config_get('register_country.settings');
  $ip = ip_address();
  $country = ip2country_get_country($ip);
  $user_denied_message = $settings['user_denied_message'];
  $blocked = FALSE;

  if ($country) {
    if (!in_array($country, $settings['countries']) && $settings['exclude_include'] == 'include') {
      $blocked = TRUE;
    }
    elseif (in_array($country, $settings['countries']) && $settings['exclude_include'] == 'exclude') {
      $blocked = TRUE;
    }
  }
  else {
    if ($settings['no_match'] == 'block') {
      $blocked = TRUE;
    }
    else {
      // If we allowed a visitor to register with an unmatched IP address, we
      // log this to allow admins to verify manually.
      $replacements = array('!ip' => $ip);
      $message = 'Visitor with unmatched IP address "!ip" was allowed to register.';
      watchdog('register_country_unmatched_ip', $message, $replacements, WATCHDOG_WARNING);
    }
  }

  if ($blocked) {
    backdrop_set_message($user_denied_message);
    backdrop_goto($settings['error_page']);
  }
}

/**
 * Implements hook_config_info().
 */
function register_country_config_info() {
  $prefixes['register_country.settings'] = array(
    'label' => t('Register Country settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}
