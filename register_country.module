<?php
// $Id$

/**
 * @file
 * Allows the admin to select which countries (based on IP address) can register for this site.
 */

/**
 * Implementation of hook_help().
 *  The first case adds a little help text.
 *  The second case adds some submission guidelines on the create content page.
 */
function register_country_help($section) {
  switch ($section) {

    case 'admin/help#register_country':
      $output = '<p>'. t('The site administrator can limit registration at this site to specific countries. The country is determined by the IP address of the user. There is no specific access permission for this module; it uses \'administer site configuration\'.') .'</p>';
     return $output;
  }
}

/**
 * Implementation of hook_menu().
 *  Add a menu item to the Administer >> Site building menu for displaying the register_country.
 */
function register_country_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/register_country',
      'title' => t('Register country settings'),
      'description' => t('Limit registration to specific countries based on IP address.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('register_country_settings_form'),
      'access' => user_access('administer site configuration'),
    );
  }
  return $items;
}

/**
 * Define a form to control the settings.
 */
function register_country_settings_form() {
 // Pull in our form's style sheet.
  drupal_add_css(drupal_get_path('module', 'register_country') .'/register_country.css');

  $_default_settings = array(
                             // Try to use the site's "access denied" page,if it exists, for a default.
                             'error_page' => variable_get('site_403', 'node'),
                             'countries' => array('US'),
                         );
  $register_country_settings = variable_get('register_country_settings', $_default_settings);

  $form['error_page'] = array(
    '#type' => 'textfield',
    '#title' => t('Registration denied page'),
//    '#suffix' => '</div>',
    '#description' => t("This the address of the page to which the user will be redirected if they are not within one of the selected countries."),
    '#weight' => -5,
    '#default_value' => $register_country_settings['error_page'],
    );

// Countries Fieldset 
  $form['countries'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Select countries'), 
    '#weight' => -1,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#prefix' => '<div class="register_country_countries_section">',
    '#suffix' => '',
  );

// TODO: fix formatting problem when country name splits to a new line.
    // Do a loop to get all the countries we know about.
  $results = db_query("SELECT country_code2 AS code, country_name AS name FROM {iso3166}");
  while ($cntry = db_fetch_object($results)) {
    $form['countries']['country-'. $cntry->code] = array('#type' => 'checkbox',
        '#title' => t($cntry->name),
        '#default_value' => in_array($cntry->code, $register_country_settings['countries']),
        '#prefix' => "\n".'<div class="register_country_country">',
        '#suffix' => '</div>',
      );
  } /* end while */	

  $form['update']['attach'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#prefix' => '</div><div class="clear-block"></div>',
    '#weight' => 3,
  );

  return $form;
}

/**
 * Implementation of hook_form_submit().
 *  Save the settings values.
 */
function register_country_settings_form_submit($form_id, $form_values) {
  // We have to loop through all the form values to find the countries that are selected.
  $countries = array();
  foreach ($form_values as $key => $value) {
    if (substr($key, 0, 8) == 'country-') {
	  // Checkbox values are boolean.
	  if ($value) { $countries[] = substr($key, 8, 2); } 
	} /* end country- check */
  } /* end foreach */
  $register_country_settings = array(
                            'error_page' => $form_values['error_page'],
                            'countries' => $countries,
                        );	 
  variable_set('register_country_settings', $register_country_settings);

  drupal_set_message(t('Configuration has been updated. '), 'notice'); 
}

/**
 * Implementation of hook_user().
 *  Checks the user's IP Address on registration.
 *  If they are from one of the specified countries, allow registration to continue.
 *  If not, then redirect to a designated page.
 */
function register_country_user($op, &$edit, &$account, $category = NULL){
  $register_country_settings = variable_get('register_country_settings', array());
  switch ($op) {
    case 'register':
      $addr = $_SERVER['REMOTE_ADDR'];
      $country = ip2cc_get_country($addr);

    // If $country is Null, then it wasn't found in the table.
    // This won't happen with my patch to ip2cc.
      if ($country->country_code2) {

       // See if it's an allowed country code.
        if (in_array($country->country_code2, $register_country_settings['countries'])) { /* okay */ }
         // No, go to the error page.
        else { drupal_goto($register_country_settings['error_page']); }

      } /* end if country */
      else { 
        drupal_set_message("Your IP address was not found in our country look up table.");
        drupal_goto($register_country_settings['error_page']);
      }
      break;  /* end of register */

  } /* end of switch */
}
